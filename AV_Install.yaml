---
- name: Playbook for installation of AV
  hosts: all
  tasks:
  - name: Need to delete the cache file before proceeding for Patching
    file:
      path: /var/cache # required. Path to the file being managed.
      state: absent
    when: 
    - ansible_distribution == "RedHat" or ansible_distribution =="Rocky"  or ansible_distribution == "CentOS"
  
  - name: Find all files in the directory /etc/yum.repos.d/
    find:
        paths: /etc/yum.repos.d/
        file_type: file
    register: found_files
    when: (ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7') or
            (ansible_distribution == 'Rocky' and ansible_distribution_major_version == '8')

  - name: Move files except redhat.repo
    command: mv -f "{{ item.path }}" "/etc/yum.repos.d/old_repo/{{ item.path | basename }}"
    when: (item.path != "/etc/yum.repos.d/redhat.repo") and
            ((ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7') or
            (ansible_distribution == 'Rocky' and ansible_distribution_major_version == '8'))
    with_items: "{{ found_files.files }}"
  
  - name: Install unzip Package
    yum:
      name: unzip
      state: latest
      skip_broken: yes
      disable_gpg_check: yes
      update_cache: yes
    when:  ansible_distribution == "CentOS" or  ansible_distribution == "Rocky" or ansible_distribution == "OracleLinux"
  
  - name: Subscribe the RHEL 8 to Red Hat Portal for installing the unzip package 
    redhat_subscription:
      state: present 
      username:  rajkumar.madnoli 
      password:  xxxxxxxxxx 
    when:
    - ansible_distribution == "RedHat" 
    - ansible_distribution_major_version == '8'
    - ansible_host != "172.17.49.173"
    - ansible_host != "172.17.49.172"
    - ansible_host != "172.17.49.163"
    - ansible_host != "172.17.49.154" 
  
  - name: Enabling the Required Repo for unzip package installation
    rhsm_repository:
      state: present 
      name: "{{ item  }}" 
      purge: False 
    when: 
    - ansible_distribution == "RedHat" 
    - ansible_distribution_major_version == '8'
    - ansible_host != "172.17.49.173"
    - ansible_host != "172.17.49.172"
    - ansible_host != "172.17.49.163"
    - ansible_host != "172.17.49.154"  
    with_items:
      - rhel-8-for-x86_64-baseos-rpms
      - codeready-builder-for-rhel-8-x86_64-rpms
      - rhel-8-for-x86_64-appstream-rpms

  - name: Install Unzip Package on Red Hat 8 system
    dnf:
      name: unzip
      state: latest 
      autoremove: yes 
      skip_broken: yes 
      update_cache: yes 
    when: 
    - ansible_distribution == "RedHat" 
    - ansible_distribution_major_version == '8' 
    - ansible_host != "172.17.49.173"
    - ansible_host != "172.17.49.172"
    - ansible_host != "172.17.49.163"
    - ansible_host != "172.17.49.154" 
  
  - name: Unsubscribe Red Hat 8 Servers from redhat portal
    redhat_subscription:
      state: absent
      username:  rajkumar.madnoli 
      password:  xxxxxxxxxx 
    when: 
    - ansible_distribution == "RedHat"
    - ansible_distribution_major_version == '8'
    - ansible_host != "172.17.49.173"
    - ansible_host != "172.17.49.172"
    - ansible_host != "172.17.49.163"
    - ansible_host != "172.17.49.154"
  
  - name: Update APT package cache for ubuntu based system
    apt:
        update_cache: yes
    when: ansible_distribution == 'Ubuntu'
  
  - name: Install Unzip package on Ubuntu system
    apt:
      name: "unzip"
      state: latest
    when: ansible_distribution == 'Ubuntu'

  - name: Deleting /home/ansadmin/AV  Directory if already present
    file:
      path: /home/ansadmin/AV 
      state: absent
  
  - name: Create the AV directory in /home/ansadmin/AV
    file:
      path: /home/ansadmin/AV # required. Path to the file being managed.
      state: directory # not required. choices: absent;directory;file;hard;link;touch. If C(absent), directories will be recursively deleted, and files or symlinks will be unlinked. In the case of a directory, if C(diff) is declared, you will see the files and folders deleted listed under C(path_contents). Note that C(absent) will not cause C(file) to fail if the C(path) does not exist as the state did not change. If C(directory), all intermediate subdirectories will be created if they do not exist. Since Ansible 1.7 they will be created with the supplied permissions. If C(file), without any other options this works mostly as a 'stat' and will return the current state of C(path). Even with other options (i.e C(mode)), the file will be modified but will NOT be created if it does not exist; see the C(touch) value or the M(copy) or M(template) module if you want that behavior. If C(hard), the hard link will be created or changed. If C(link), the symbolic link will be created or changed. If C(touch) (new in 1.4), an empty file will be created if the C(path) does not exist, while an existing file or directory will receive updated file access and modification times (similar to the way C(touch) works from the command line).

  - name: Copy the the setup file to required location. 
    copy:
      dest: /home/ansadmin/AV/ # required. Remote absolute path where the file should be copied to. If C(src) is a directory, this must be a directory too. If C(dest) is a non-existent path and if either C(dest) ends with "/" or C(src) is a directory, C(dest) is created. If I(dest) is a relative path, the starting directory is determined by the remote host. If C(src) and C(dest) are files, the parent directory of C(dest) is not created and the task fails if it does not already exist.
      src: /home/ansadmin/AV.zip  # not required. Local path to a file to copy to the remote server. This can be absolute or relative. If path is a directory, it is copied recursively. In this case, if path ends with "/", only inside contents of that directory are copied to destination. Otherwise, if it does not end with "/", the directory itself with all contents is copied. This behavior is similar to the C(rsync) command line tool.

  - name: Unzip the package 
    unarchive:
      src: /home/ansadmin/AV/AV.zip # required. If C(remote_src=no) (default), local path to archive file to copy to the target server; can be absolute or relative. If C(remote_src=yes), path on the target server to existing archive file to unpack. If C(remote_src=yes) and C(src) contains C(://), the remote machine will download the file from the URL first. (version_added 2.0). This is only for simple cases, for full download support use the M(get_url) module.
      dest: /home/ansadmin/AV     # required. Remote absolute path where the archive should be unpacked.
      remote_src: yes # not required. Set to C(yes) to indicate the archived file is already on the remote system and not local to the Ansible controller. This option is mutually exclusive with C(copy).
      