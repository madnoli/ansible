---
- name: Playbook for installation of AV
  hosts: all
  tasks:
  - name: Need to delete the cache file before proceeding for Patching
    file:
      path: /var/cache # required. Path to the file being managed.
      state: absent 
  
  - name: Install unzip Package
    yum:
      name: unzip
      state: latest
      skip_broken: yes
      disable_gpg_check: yes
      update_cache: yes
    when:  ansible_distribution == "CentOS" or  ansible_distribution == "Rocky"
  
  - name: Subscribe the RHEL 8 to Red Hat Portal for installing the unzip package 
    redhat_subscription:
      state: present 
      username:  rajkumar.madnoli 
      password:  xxxxxxxxxx 
    when: ansible_distribution == "RedHat" and ansible_distribution_major_version == '8' and ansible_host != "172.17.49.173" and ansible_host != "172.17.49.172"  and ansible_host != "172.17.49.163" and ansible_host != "172.17.49.154"  
  
  - name: Enabling the Required Repo for unzip package installation
    rhsm_repository:
      state: present 
      name: "{{ item  }}" 
      purge: False 
    when: ansible_distribution == "RedHat" and ansible_distribution_major_version == '8' and ansible_host != "172.17.49.173" and ansible_host != "172.17.49.172"  and ansible_host != "172.17.49.163" and ansible_host != "172.17.49.154"  
    with_items:
      - rhel-8-for-x86_64-baseos-rpms
      - codeready-builder-for-rhel-8-x86_64-rpms
      - rhel-8-for-x86_64-appstream-rpms

  - name: Install Unzip Package on Red Hat 8 system
    dnf:
      name: unzip
      state: latest 
      autoremove: yes 
      skip_broken: yes 
      update_cache: yes 
    when: 
    - ansible_distribution == "RedHat" 
    - ansible_distribution_major_version == '8' 
    - ansible_host != "172.17.49.173" 
    - ansible_host != "172.17.49.172"  
    - ansible_host != "172.17.49.163" 
    - ansible_host != "172.17.49.154"  
  
  - name: Unsubscribe Red Hat 8 Servers from redhat portal
    redhat_subscription:
      state: absent
      username:  rajkumar.madnoli 
      password:  xxxxxxxxxx 
    when: 
    - ansible_distribution == "RedHat"
    - ansible_distribution_major_version == '8'
    - ansible_host != "172.17.49.173"
    - ansible_host != "172.17.49.172"
    - ansible_host != "172.17.49.163"
    - ansible_host != "172.17.49.154"

  - name: Craete the seperate the AV directory in remote host
    file:
      path:  # required. Path to the file being managed.
      state: absent # not required. choices: absent;directory;file;hard;link;touch. If C(absent), directories will be recursively deleted, and files or symlinks will be unlinked. In the case of a directory, if C(diff) is declared, you will see the files and folders deleted listed under C(path_contents). Note that C(absent) will not cause C(file) to fail if the C(path) does not exist as the state did not change. If C(directory), all intermediate subdirectories will be created if they do not exist. Since Ansible 1.7 they will be created with the supplied permissions. If C(file), without any other options this works mostly as a 'stat' and will return the current state of C(path). Even with other options (i.e C(mode)), the file will be modified but will NOT be created if it does not exist; see the C(touch) value or the M(copy) or M(template) module if you want that behavior. If C(hard), the hard link will be created or changed. If C(link), the symbolic link will be created or changed. If C(touch) (new in 1.4), an empty file will be created if the C(path) does not exist, while an existing file or directory will receive updated file access and modification times (similar to the way C(touch) works from the command line).
      src:  # not required. Path of the file to link to. This applies only to C(state=link) and C(state=hard). For C(state=link), this will also accept a non-existing path. Relative paths are relative to the file being created (C(path)) which is how the Unix command C(ln -s SRC DEST) treats relative paths.
      recurse: False # not required. Recursively set the specified file attributes on directory contents. This applies only when C(state) is set to C(directory).
      force: False # not required. Force the creation of the symlinks in two cases: the source file does not exist (but will appear later); the destination exists and is a file (so, we need to unlink the C(path) file and create symlink to the C(src) file in place of it).
    
      follow: True # not required. This flag indicates that filesystem links, if they exist, should be followed. Previous to Ansible 2.5, this was C(no) by default.
      modification_time:  # not required. This parameter indicates the time the file's modification time should be set to. Should be C(preserve) when no modification is required, C(YYYYMMDDHHMM.SS) when using default time format, or C(now). Default is None meaning that C(preserve) is the default for C(state=[file,directory,link,hard]) and C(now) is default for C(state=touch).
      modification_time_format: %Y%m%d%H%M.%S # not required. When used with C(modification_time), indicates the time format that must be used. Based on default Python format (see time.strftime doc).
      access_time:  # not required. This parameter indicates the time the file's access time should be set to. Should be C(preserve) when no modification is required, C(YYYYMMDDHHMM.SS) when using default time format, or C(now). Default is C(None) meaning that C(preserve) is the default for C(state=[file,directory,link,hard]) and C(now) is default for C(state=touch).
      access_time_format: %Y%m%d%H%M.%S # not required. When used with C(access_time), indicates the time format that must be used. Based on default Python format (see time.strftime doc).
      mode:  # not required. The permissions the resulting file or directory should have. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number. Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results. As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)). As of Ansible 2.6, the mode may also be the special string C(preserve). When set to C(preserve) the file will be given the same permissions as the source file.
      owner:  # not required. Name of the user that should own the file/directory, as would be fed to I(chown).
      group:  # not required. Name of the group that should own the file/directory, as would be fed to I(chown).
      seuser:  # not required. The user part of the SELinux file context. By default it uses the C(system) policy, where applicable. When set to C(_default), it will use the C(user) portion of the policy if available.
      serole:  # not required. The role part of the SELinux file context. When set to C(_default), it will use the C(role) portion of the policy if available.
      setype:  # not required. The type part of the SELinux file context. When set to C(_default), it will use the C(type) portion of the policy if available.
      selevel: s0 # not required. The level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the C(range). When set to C(_default), it will use the C(level) portion of the policy if available.
      unsafe_writes: False # not required. Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target file. By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted files, which cannot be updated atomically from inside the container and can only be written in an unsafe manner. This option allows Ansible to fall back to unsafe methods of updating files when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes). IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.
      attributes:  # not required. The attributes the resulting file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr). The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string.
    file:
      stae: directory
      path: /home/ansadmin/AV
       
  - name: Craete the seperate the AV directory in remote host
    file:
      stae: directory
      path: /home/ansadmin/AV
      owener: root
      group: root
      mode: 0755

  - name: Copy the file 
    copy:
      dest: /home/ansadmin/AV # required. Remote absolute path where the file should be copied to. If C(src) is a directory, this must be a directory too. If C(dest) is a non-existent path and if either C(dest) ends with "/" or C(src) is a directory, C(dest) is created. If I(dest) is a relative path, the starting directory is determined by the remote host. If C(src) and C(dest) are files, the parent directory of C(dest) is not created and the task fails if it does not already exist.
      src:  /home/ansadmin/AV# not required. Local path to a file to copy to the remote server. This can be absolute or relative. If path is a directory, it is copied recursively. In this case, if path ends with "/", only inside contents of that directory are copied to destination. Otherwise, if it does not end with "/", the directory itself with all contents is copied. This behavior is similar to the C(rsync) command line tool.
      force: True # not required. Influence whether the remote file must always be replaced. If C(yes), the remote file will be replaced when contents are different than the source. If C(no), the file will only be transferred if the destination does not exist. Alias C(thirsty) has been deprecated and will be removed in 2.13.

  - name: Unzip the AV 
    unarchive:
      src: /home/ansadmin/AV # required. If C(remote_src=no) (default), local path to archive file to copy to the target server; can be absolute or relative. If C(remote_src=yes), path on the target server to existing archive file to unpack. If C(remote_src=yes) and C(src) contains C(://), the remote machine will download the file from the URL first. (version_added 2.0). This is only for simple cases, for full download support use the M(get_url) module.
      dest: /home/ansadmin/AV  # required. Remote absolute path where the archive should be unpacked.
      copy: True # not required. If true, the file is copied from local 'master' to the target machine, otherwise, the plugin will look for src archive at the target machine. This option has been deprecated in favor of C(remote_src). This option is mutually exclusive with C(remote_src).
      creates:  # not required. If the specified absolute path (file or directory) already exists, this step will B(not) be run.
      list_files: False # not required. If set to True, return the list of files that are contained in the tarball.
      exclude:  # not required. List the directory and file entries that you would like to exclude from the unarchive action.
      keep_newer: False # not required. Do not replace existing files that are newer than files from the archive.
      extra_opts:  # not required. Specify additional options by passing in an array. Each space-separated command-line option should be a new element of the array. See examples. Command-line options with multiple elements must use multiple lines in the array, one for each element.
      remote_src: False # not required. Set to C(yes) to indicate the archived file is already on the remote system and not local to the Ansible controller. This option is mutually exclusive with C(copy).
      validate_certs: True # not required. This only applies if using a https URL as the source of the file. This should only set to C(no) used on personally controlled sites using self-signed certificate. Prior to 2.2 the code worked as if this was set to C(yes).
      decrypt: True # not required. This option controls the autodecryption of source files using vault.
      mode:  # not required. The permissions the resulting file or directory should have. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number. Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results. As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)). As of Ansible 2.6, the mode may also be the special string C(preserve). When set to C(preserve) the file will be given the same permissions as the source file.
      owner:  # not required. Name of the user that should own the file/directory, as would be fed to I(chown).
      group:  # not required. Name of the group that should own the file/directory, as would be fed to I(chown).
      seuser:  # not required. The user part of the SELinux file context. By default it uses the C(system) policy, where applicable. When set to C(_default), it will use the C(user) portion of the policy if available.
      serole:  # not required. The role part of the SELinux file context. When set to C(_default), it will use the C(role) portion of the policy if available.
      setype:  # not required. The type part of the SELinux file context. When set to C(_default), it will use the C(type) portion of the policy if available.
      selevel: s0 # not required. The level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the C(range). When set to C(_default), it will use the C(level) portion of the policy if available.
      unsafe_writes: False # not required. Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target file. By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted files, which cannot be updated atomically from inside the container and can only be written in an unsafe manner. This option allows Ansible to fall back to unsafe methods of updating files when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes). IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.
      attributes:  # not required. The attributes the resulting file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr). The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string.    


